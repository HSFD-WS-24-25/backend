generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sub          String        @unique
  email        String?       @unique
  username     String?       @unique @db.VarChar(50)
  first_name   String?       @db.VarChar(50)
  last_name    String?       @db.VarChar(50)
  telephone    String?       @db.VarChar(20)
  address      String?
  role_id      Int
  role         Role          @relation(fields: [role_id], references: [id])
  organization_id Int?       
  organizations Organization[]
  participants Participant[]

  @@map("users")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(50)
  description String
  users       User[]
  permissions Permission[]

  @@map("roles")
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  roles Role[]

  @@map("permissions")
}

model Organization {
  id          Int    @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String
  users User[]
  
  @@map("organizations")
}

model Participant {
  event_id         Int
  user_id          String  @db.Uuid
  status           String?
  additional_guest Int     @default(0)

  user  User  @relation(fields: [user_id], references: [id])
  event Event @relation(fields: [event_id], references: [id])

  @@id([user_id, event_id])
  @@map("participants")
}

model Event {
  id                    Int           @id @default(autoincrement())
  name                  String
  description           String
  date_start            DateTime
  date_end              DateTime
  location              String
  capacity              Int
  reminder              Int
  max_additional_guests Int           @default(0)
  participants          Participant[]

  @@map("events")
}
